// info function for giveing information about the methods.
let info = () => {
    console.log("This package is a combination of many useful functions.");
    console.log({
        "Find GCD": 'getGcd(arg1, arg2)',
        "Find Fibonnaci": 'getFib(arg_n)',
        "Print Fibonacci": 'printFib(n)',
        "Sum Of All Digit": 'sumAllDigit(n)',
        "Reverse Number": 'reverseNumber',
        "Check Armstrong number": 'isArmstrong(n)',
        "Sum of n numbers": 'sumOfN(n)',
        "Factorial": 'fac(n)',
        "Power x^y": 'pow(x, y)',
        "Lenght of string or numbers": 'len(str/number)',
        "Check given number prime or not": 'isPrime(n)',
        "Check the both number co-prime or not.": 'isCoPrime(x, y)',
        "Convert the Hexadecimal to Decimal number system.": 'hexToDec(hex)',
        "Convert the Hexadecimal to Octal number system.": 'hexToOct(hex)',
        "Convert the Hexadecimal to Binary number system.": 'hexToBin(hex)',
        "Convert the Decimal to Hexadecimal number system.": 'decToHex(hex)',
        "Convert the Decimal to Octal number system.": 'decToOct(hex)',
        "Convert the Decimal to Binary number system.": 'decToBin(hex)',
        "Convert the Octal to Hexadecimal number system.": 'octToHex(oct)',
        "Convert the Octal to Decimal number system.": 'octToDec(oct)',
        "Convert the Octal to Binary number system.": 'octToBin(oct)',
        "Convert the Binary to Hexadecimal number system.": 'binToHex(bin)',
        "Convert the Binary to Decimal number system.": 'binToDec(bin)',
        "Convert the Binary to Octal number system.": 'binToOct(bin)',
        // kilometer
        "The kmToMe function convert kilometer to meter.": 'kmToMe(km)',
        "The kmToCm function convert kilometer to centimeter.": 'kmToCm(km)',
        "The kmToMm function convert kilometer to millimeter.": 'kmToMm(km)',
        "The kmToUm function convert kilometer to micrometer.": 'kmToUm(km)',
        "The kmToNm function convert kilometer to nanometer.": 'kmToNm(km)',
        "The kmToYd function convert kilometer to yard.": 'kmToYd(km)',
        "The kmToFt function convert kilometer to foot.": 'kmToFt(km)',
        "The kmToIn function convert kilometer to inch.": 'kmToIn(km)',
        // meter
        "The meToKm function convert meter to kilometer.": 'meToKm(me)',
        "The meToCm function convert meter to centimeter.": 'meToCm(me)',
        "The meToMm function convert meter to millimeter.": 'meToMm(me)',
        "The meToUm function convert meter to micrometer.": 'meToUm(me)',
        "The meToNm function convert meter to nanometer.": 'meToNm(me)',
        "The meToYd function convert meter to yard.": 'meToYd(me)',
        "The meToFt function convert meter to foot.": 'meToFt(me)',
        "The meToIn function convert meter to inch.": 'meToIn(me)',
        // centimetre
        "The cmToKm function convert centimeter to kilometer.": 'cmToKm(cm)',
        "The cmToMe function convert centimeter to meter.": 'cmToMe(cm)',
        "The cmToMm function convert centimeter to millimeter.": 'cmToMm(cm)',
        "The cmToUm function convert centimeter to micrometer.": 'cmToUm(cm)',
        "The cmToNm function convert centimeter to nanometer.": 'cmToNm(cm)',
        "The cmToYd function convert centimeter to yard.": 'cmToYd(cm)',
        "The cmToFt function convert centimeter to foot.": 'cmToFt(cm)',
        "The cmToIn function convert centimeter to inch.": 'cmToIn(cm)',
        // millimeter
        "The mmToKm function convert millimeter to kilometer.": 'mmToKm(mm)',
        "The mmToMe function convert millimeter to meter.": 'mmToMe(mm)',
        "The mmToCm function convert millimeter to centimeter.": 'mmToCm(mm)',
        "The mmToUm function convert millimeter to micrometer.": 'mmToUm(mm)',
        "The mmToNm function convert millimeter to nanometer.": 'mmToNm(mm)',
        "The mmToYd function convert millimeter to yard.": 'mmToYd(mm)',
        "The mmToFt function convert millimeter to foot.": 'mmToFt(mm)',
        "The mmToIn function convert millimeter to inch.": 'mmToIn(mm)',
        // micrometer
        "The umToKm function convert micrometer to kilometer.": 'umToKm(um)',
        "The umToMe function convert micrometer to meter.": 'umToMe(um)',
        "The umToCm function convert micrometer to centimeter.": 'umToCm(um)',
        "The umToMm function convert micrometer to millimeter.": 'umToMm(um)',
        "The umToNm function convert micrometer to nanometer.": 'mmToNm(mm)',
        "The umToYd function convert micrometer to yard.": 'umToYd(um)',
        "The umToFt function convert micrometer to foot.": 'umToFt(um)',
        "The umToIn function convert micrometer to inch.": 'umToIn(um)',
        // nanometer
        "The nmToKm function convert nanometer to kilometer.": 'nmToKm(nm)',
        "The nmToMe function convert nanometer to meter.": 'nmToMe(nm)',
        "The nmToCm function convert nanometer to centimeter.": 'nmToCm(nm)',
        "The nmToMm function convert nanometer to millimeter.": 'nmToMm(nm)',
        "The nmToUm function convert nanometer to micrometer.": 'nmToUm(nm)',
        "The nmToYd function convert nanometer to yard.": 'nmToYd(nm)',
        "The nmToFt function convert nanometer to foot.": 'nmToFt(nm)',
        "The nmToIn function convert nanometer to inch.": 'nmToIn(nm)',
        // yard
        "The ydToKm function convert yard to kilometer.": 'ydToKm(yd)',
        "The ydToMe function convert yard to meter.": 'ydToMe(yd)',
        "The ydToCm function convert yard to centimeter.": 'ydToCm(yd)',
        "The ydToMm function convert yard to millimeter.": 'ydToMm(yd)',
        "The ydToUm function convert yard to micrometer.": 'ydToUm(yd)',
        "The ydToNm function convert yard to nanometer.": 'ydToNm(yd)',
        "The ydToFt function convert yard to foot.": 'ydToFt(yd)',
        "The ydToIn function convert yard to inch.": 'ydToIn(yd)',
        // foot
        "The ftToKm function convert foot to kilometer.": 'ftToKm(ft)',
        "The ftToMe function convert foot to meter.": 'ftToMe(ft)',
        "The ftToCm function convert foot to centimeter.": 'ftToCm(ft)',
        "The ftToMm function convert foot to millimeter.": 'ftToMm(ft)',
        "The ftToUm function convert foot to micrometer.": 'ftToUm(ft)',
        "The ftToNm function convert foot to nanometer.": 'ftToNm(ft)',
        "The ftToYd function convert foot to yard.": 'ftToYd(ft)',
        "The ftToIn function convert foot to inch.": 'ftToIn(ft)',
        // inch
        "The inToKm function convert inch to kilometer.": 'inToKm(in)',
        "The inToMe function convert inch to meter.": 'inToMe(in)',
        "The inToCm function convert inch to centimeter.": 'inToCm(in)',
        "The inToMm function convert inch to millimeter.": 'inToMm(in)',
        "The inToUm function convert inch to micrometer.": 'inToUm(in)',
        "The inToNm function convert inch to nanometer.": 'inToNm(in)',
        "The inToYd function convert inch to yard.": 'inToYd(in)',
        "The inToFt function convert inch to foot.": 'inToFt(in)',
        // Temperature methods.
        // Celsius to fahrenheit and kelvin
        "The celToFah function convert celsius to fahrenheit.": 'calToFah(c)',
        "The celToKel function convert celsius to kelvin.": 'calToKel(c)',
        // fahrenheit to Celsius and kelvin
        "The fahToCel function convert fahrenheit to celsius.": 'fahToCel(f)',
        "The fahToKel function convert fahrenheit to kelvin.": 'fahToKel(f)',
        // kelvin to Celsius and fahrenheit
        "The kelToCel function convert kelvin to Celsius.": 'kelToCel(k)',
        "The kelToFah function convert kelvin to fahrenheit.": 'kelToFah(k)',
        // new meth's methods
        "The isKishnamurthyNumber method are return true false acording to number. ": 'isKishnamurthyNumber(n)',
        "The avg method are return the avarage of the given array ": 'avg([n1, n2, n3])',
        "The mod method are return the mod value of the number. ": 'mod(+-n)',
        "The wordCount method are return the word count of a string. ": 'wordCount(`this is word count.`, ` `)',
        "The isLeap method are return ture false according to the year. ": 'isLeap(year)',
        "The lcm method are return two numbers lcm. ": 'lcm(n1, n2)',
        "The hcf method are return two numbers hcf/gcd. ": 'hcf(n1, n2)',
        "The ascii method are return ascii value of a charector. ": 'ascii(`a`)',
        "The reverse method are return reverse stirng. ": 'reverse(`abc`)',
        "The isPalindrome is try to check the string isPalindrome or not ": 'isPalindrome(`aba`)',
        "The permutation give all permutation array. ": 'permutation(`abc`)',
    });
}
// maths methods.
const {
    getFib,
    getGcd,
    printFib,
    sumAllDigit,
    reverseNumber,
    isArmstrong,
    sumOfN,
    fac,
    pow,
    len,
    isPrime,
    isCoPrime,
    isKishnamurthyNumber,
    avg, 
    mod, 
    wordCount,
    isLeap, 
    lcm, 
    hcf, 
    ascii, 
    reverse, 
    isPalindrome, 
    permutation
} = require('./src/math/math');

// numbers systems.
const {
    hexToDec,
    hexToOct,
    hexToBin,
    decToHex,
    decToOct,
    decToBin,
    octToHex,
    octToDec,
    octToBin,
    binToHex,
    binToDec,
    binToOct
} = require('./src/number/number');

// length conversion
const {
    // km
    kmToMe,
    kmToCm,
    kmToMm,
    kmToUm,
    kmToNm,
    kmToYd,
    kmToFt,
    kmToIn,
    // me
    meToKm,
    meToCm,
    meToMm,
    meToUm,
    meToNm,
    meToYd,
    meToFt,
    meToIn,
    // cm to all
    cmToKm,
    cmToMe,
    cmToMm,
    cmToUm,
    cmToNm,
    cmToYd,
    cmToFt,
    cmToIn,
    // mm to all
    mmToKm,
    mmToMe,
    mmToCm,
    mmToUm,
    mmToNm,
    mmToYd,
    mmToFt,
    mmToIn,
    //um to all
    umToKm,
    umToMe,
    umToCm,
    umToMm,
    umToNm,
    umToYd,
    umToFt,
    umToIn,
    // nm to all
    nmToKm,
    nmToMe,
    nmToCm,
    nmToMm,
    nmToUm,
    nmToYd,
    nmToFt,
    nmToIn,
    // yard to all
    ydToKm,
    ydToMe,
    ydToCm,
    ydToMm,
    ydToUm,
    ydToNm,
    ydToFt,
    ydToIn,
    // foot to all
    ftToKm,
    ftToMe,
    ftToCm,
    ftToMm,
    ftToUm,
    ftToNm,
    ftToYd,
    ftToIn,
    // inch to all
    inToKm,
    inToMe,
    inToCm,
    inToMm,
    inToUm,
    inToNm,
    inToYd,
    inToFt
} = require('./src/units/length/length');


// temperature conversion 
const {
    celToFah,
    celToKel,
    fahToCel,
    fahToKel,
    kelToCel,
    kelToFah
} = require('./src/units/temperature/temperature');


// area conversion

const {
    // square kilometer to all
    sqKmToSqMe,
    sqKmToSqYd,
    sqKmToSqFt,
    sqKmToSqIn,
    sqKmToHect,
    sqKmToAcre,
    // square meter to all
    sqMeToSqKm,
    sqMeToSqYd,
    sqMeToSqFt,
    sqMeToSqIn,
    sqMeToHect,
    sqMeToAcre,
    // square yard to all
    sqYdToSqKm,
    sqYdToSqMe,
    sqYdToSqFt,
    sqYdToSqIn,
    sqYdToHect,
    sqYdToAcre,
    // square foot to all
    sqFtToSqKm,
    sqFtToSqMe,
    sqFtToSqYd,
    sqFtToSqIn,
    sqFtToHect,
    sqFtToAcre,
    // square inch to all
    sqInToSqKm,
    sqInToSqMe,
    sqInToSqYd,
    sqInToSqFt,
    sqInToHect,
    sqInToAcre,
    // square hectare to all
    hectToSqKm,
    hectToSqMe,
    hectToSqYd,
    hectToSqFt,
    hectToSqIn,
    hectToAcre,
    // square acre to all
    acreToSqKm,
    acreToSqMe,
    acreToSqYd,
    acreToSqFt,
    acreToSqIn,
    acreToHect,
} = require('./src/units/area/area');


// exports the all functions.
module.exports = {
    info,
    // maths.
    getFib,
    getGcd,
    printFib,
    sumAllDigit,
    reverseNumber,
    isArmstrong,
    sumOfN,
    fac,
    pow,
    len,
    isPrime,
    isCoPrime,
    isKishnamurthyNumber,
    avg, 
    mod, 
    wordCount,
    isLeap, 
    lcm, 
    hcf, 
    ascii, 
    reverse, 
    isPalindrome, 
    permutation,
    // numbers system.
    hexToDec,
    hexToOct,
    hexToBin,
    decToHex,
    decToOct,
    decToBin,
    octToHex,
    octToDec,
    octToBin,
    binToHex,
    binToDec,
    binToOct,
    // length conversion
    // km
    kmToMe,
    kmToCm,
    kmToMm,
    kmToUm,
    kmToNm,
    kmToYd,
    kmToFt,
    kmToIn,
    // me
    meToKm,
    meToCm,
    meToMm,
    meToUm,
    meToNm,
    meToYd,
    meToFt,
    meToIn,
    // cm
    cmToKm,
    cmToMe,
    cmToMm,
    cmToUm,
    cmToNm,
    cmToYd,
    cmToFt,
    cmToIn,
    // mm
    mmToKm,
    mmToMe,
    mmToCm,
    mmToUm,
    mmToNm,
    mmToYd,
    mmToFt,
    mmToIn,
    // um
    umToKm,
    umToMe,
    umToCm,
    umToMm,
    umToNm,
    umToYd,
    umToFt,
    umToIn,
    // nm
    nmToKm,
    nmToMe,
    nmToCm,
    nmToMm,
    nmToUm,
    nmToYd,
    nmToFt,
    nmToIn,
    // yard
    ydToKm,
    ydToMe,
    ydToCm,
    ydToMm,
    ydToUm,
    ydToNm,
    ydToFt,
    ydToIn,
    // foot
    ftToKm,
    ftToMe,
    ftToCm,
    ftToMm,
    ftToUm,
    ftToNm,
    ftToYd,
    ftToIn,
    // inch
    inToKm,
    inToMe,
    inToCm,
    inToMm,
    inToUm,
    inToNm,
    inToYd,
    inToFt,
    // temperatures conversion
    celToFah,
    celToKel,
    fahToCel,
    fahToKel,
    kelToCel,
    kelToFah,
    // square kilometer to all
    sqKmToSqMe,
    sqKmToSqYd,
    sqKmToSqFt,
    sqKmToSqIn,
    sqKmToHect,
    sqKmToAcre,
    // square meter to all
    sqMeToSqKm,
    sqMeToSqYd,
    sqMeToSqFt,
    sqMeToSqIn,
    sqMeToHect,
    sqMeToAcre,
    // square yard to all
    sqYdToSqKm,
    sqYdToSqMe,
    sqYdToSqFt,
    sqYdToSqIn,
    sqYdToHect,
    sqYdToAcre,
    // square foot to all
    sqFtToSqKm,
    sqFtToSqMe,
    sqFtToSqYd,
    sqFtToSqIn,
    sqFtToHect,
    sqFtToAcre,
    // square inch to all
    sqInToSqKm,
    sqInToSqMe,
    sqInToSqYd,
    sqInToSqFt,
    sqInToHect,
    sqInToAcre,
    // square hectare to all
    hectToSqKm,
    hectToSqMe,
    hectToSqYd,
    hectToSqFt,
    hectToSqIn,
    hectToAcre,
    // square acre to all
    acreToSqKm,
    acreToSqMe,
    acreToSqYd,
    acreToSqFt,
    acreToSqIn,
    acreToHect
}